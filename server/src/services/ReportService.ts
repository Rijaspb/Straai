import path from 'path'
import fs from 'fs/promises'
import { PrismaClient } from '@prisma/client'
import { DateTime } from 'luxon'
import puppeteer from 'puppeteer'

export interface WeeklyReportInput {
  userId: string
  storeId: string | null
  weekOf: Date
  payload: any
  aiSummary: {
    executive_summary: string
    key_metrics: Array<{ name: string; value: number | string; explanation: string; source?: 'shopify' | 'klaviyo' | 'mixed' | 'derived' }>
    top_recommendations: string[]
  }
}

export class ReportService {
  constructor(private prisma: PrismaClient) {}

  async ensureReportsDir(): Promise<string> {
    const outDir = path.resolve(process.cwd(), 'reports')
    await fs.mkdir(outDir, { recursive: true })
    return outDir
  }

  async generateWeeklyReportPdf(input: WeeklyReportInput): Promise<{ pdfPath: string }> {
    const outDir = await this.ensureReportsDir()
    const weekStr = DateTime.fromJSDate(input.weekOf).toFormat('yyyy-LL-dd')
    const fileName = `report_${input.userId}_${weekStr}.pdf`
    const absPath = path.join(outDir, fileName)

    const browser = await puppeteer.launch({
      args: ['--no-sandbox', '--disable-setuid-sandbox'],
    })
    const page = await browser.newPage()
    await page.setContent(this.renderHtml(input), { waitUntil: 'networkidle0' })
    await page.pdf({ path: absPath, format: 'A4', printBackground: true })
    await browser.close()

    return { pdfPath: absPath }
  }

  private renderHtml(input: WeeklyReportInput): string {
    const { executive_summary, key_metrics, top_recommendations } = input.aiSummary
    const weekLabel = DateTime.fromJSDate(input.weekOf).toFormat('MMM d, yyyy')
    return `<!doctype html>
    <html>
      <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <style>
          @page { margin: 24mm; }
          body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Inter, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif; color: #0f172a; }
          h1, h2, h3 { margin: 0 0 8px; }
          h1 { font-size: 28px; }
          h2 { font-size: 18px; color: #334155; text-transform: uppercase; letter-spacing: .06em; }
          .muted { color: #64748b; }
          .card { border: 1px solid #e2e8f0; border-radius: 12px; padding: 16px 18px; margin: 14px 0; }
          .grid { display: grid; grid-template-columns: 1fr 1fr; gap: 14px; }
          .kpi { display: flex; flex-direction: column; gap: 6px; }
          .badge { display: inline-flex; align-items: center; gap: 6px; font-size: 10px; padding: 2px 6px; border-radius: 9999px; border: 1px solid #e2e8f0; color: #334155; background: #f8fafc; }
          .badge .icon { width: 12px; height: 12px; display: inline-block; }
          .badge.shopify { border-color: #86efac; background: #f0fdf4; color: #166534; }
          .badge.klaviyo { border-color: #a7f3d0; background: #ecfdf5; color: #065f46; }
          .badge.mixed { border-color: #bfdbfe; background: #eff6ff; color: #1e3a8a; }
          .badge.derived { border-color: #e5e7eb; background: #f9fafb; color: #374151; }
          .kpi .name { font-size: 12px; text-transform: uppercase; color: #64748b; letter-spacing: .05em; }
          .kpi .value { font-size: 22px; font-weight: 600; }
          .list li { margin: 8px 0; }
          .footer { position: fixed; bottom: 12px; width: 100%; text-align: center; font-size: 10px; color: #94a3b8; }
          .header { display:flex; align-items:center; justify-content: space-between; margin-bottom: 14px; }
          .brand { font-weight: 700; letter-spacing: .04em; }
          .divider { height: 1px; background: #e2e8f0; margin: 8px 0 12px; }
        </style>
      </head>
      <body>
        <div class="header">
          <div class="brand">STRAAI WEEKLY</div>
          <div class="muted">Week of ${weekLabel}</div>
        </div>
        <div class="divider"></div>
        <div class="card">
          <h1>Executive Summary</h1>
          <p class="muted">Concise takeaways to guide action this week.</p>
          <p>${escapeHtml(executive_summary)}</p>
        </div>

        <div class="grid">
          ${key_metrics
            .slice(0, 6)
            .map(
              (m) => `
            <div class="card kpi">
              <div class="name">${escapeHtml(m.name)}</div>
              <div class="value">${escapeHtml(String(m.value))}</div>
              <div class="muted">${escapeHtml(m.explanation)}</div>
              ${renderBadge(m.source)}
            </div>`
            )
            .join('')}
        </div>

        <div class="card">
          <h2>Recommendations</h2>
          <ul class="list">
            ${top_recommendations.slice(0, 6).map((r) => `<li>${escapeHtml(r)}</li>`).join('')}
          </ul>
        </div>

        <div class="footer">Generated by Straai</div>
      </body>
    </html>`
  }

  async upsertReportRecord(
    userId: string,
    storeId: string,
    weekOf: Date,
    pdfPath: string,
    summary?: string
  ): Promise<void> {
    await this.prisma.report.upsert({
      where: { userId_storeId_weekOf: { userId, storeId, weekOf } },
      create: { userId, storeId, weekOf, pdfPath, summary },
      update: { pdfPath, summary: summary ?? undefined, generatedAt: new Date() },
    })
  }
}

function escapeHtml(html: string): string {
  return html
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;')
}

function renderBadge(source?: 'shopify' | 'klaviyo' | 'mixed' | 'derived'): string {
  if (!source) return ''
  const label = source === 'shopify' ? 'Verified by Shopify' : source === 'klaviyo' ? 'Verified by Klaviyo' : source === 'mixed' ? 'Verified by Multiple' : 'Derived'
  const cls = `badge ${source}`
  // Simple inline SVG circles to avoid remote assets
  const iconColor = source === 'shopify' ? '#22c55e' : source === 'klaviyo' ? '#10b981' : source === 'mixed' ? '#3b82f6' : '#6b7280'
  const icon = `<svg class="icon" viewBox="0 0 12 12" xmlns="http://www.w3.org/2000/svg"><circle cx="6" cy="6" r="5" fill="${iconColor}" /></svg>`
  return `<div class="${cls}">${icon}<span>${escapeHtml(label)}</span></div>`
}







